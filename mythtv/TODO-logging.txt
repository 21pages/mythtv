/*
 TODO Logging primary goals:
   We can still optionally log to database tables
   Messages sent to stderr and stdout should be captured by logging
     This is for third party library logging to be captured.
       I'm not sure if this is always possible,
       but it should be possible for the file log.

 DONE Logging primary goals:
   Maintain the short-blocking logging when logging thread is running [DONE]
   Logging thread is optional [DONE]
   Logging does not consume significant additional resources [DONE]
   No messages are printed until mask and level are initialized [DONE]
   Messages sent logging after logging thread is stopped are still captured [DONE]
   Database logging is disabled by default [DONE]
   It should relatively easy to send text to the console stdout for
     command line programs. [DONE LOG_PRINT() macro]
   Logging messages should be sent to stderr, not stdout so they can
     be seperated from program output with command line programs. [DONE]
   Don't fail to log due to permissions of frontend and
     backend being different (danielk) [DONE]
   Make sure we don't consume unbounded amounts of memory if too much
     logging is done. Either via feedback (slowing down LOG), or by
     just dropping log messages. [DONE feedback added + hard-threshold]

 Logging secondary goals:
   Allow log messages to be formatted.
    i.e. "date | message | function | line | thread_id" might make sense if you
    planned to parse the message later, while a more or less compact form might
    make sense for human consumption.

 Suggestions and Amendments:
   Allow verbose mask to be printed in log message. (stichnot)
   Bring back logfile. (stichnot)
     This means we need to capture the stderr output of subcommands
     and redirect them through logging. Might as well get rid of the
     need to construct logging command line args everywhere we start
     a mythtv subprocess. (danielk)
   Don't send a notify for every LOG event. These will cause the event
     handling thread to be woken up more than it should. Instead adopt
     something similar to the tickless kernel approach.
 */

Can QCoreApplication::setApplicationName() be called earlier in
programs so that we can initialize logging earlier?

Document mythlogging{,_extra}.h

Thread-safety strategy for g_myth_logging_log_level and
g_myth_logging_verbose_mask, read write lock? other?

